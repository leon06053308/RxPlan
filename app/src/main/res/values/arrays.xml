<?xml version="1.0" encoding="utf-8"?>
<resources>
    <string-array name="category">
        <item>创建Observable的操作符</item>
        <item>变换操作</item>
        <item>过滤操作</item>
        <item>组合操作</item>
        <item>错误处理</item>
        <item>辅助操作</item>
        <item>条件和布尔操作</item>
        <item>算术和聚合操作</item>
        <item>连接操作</item>
        <item>转换操作</item>
    </string-array>

    <!--用于创建Observable的操作符-->
    <string-array name="observable_creater">
        <item>Create</item><!--通过调用观察者的方法从头创建一个Observable-->
        <item>Defer</item><!--在观察者订阅之前不创建这个Observable，为每一个观察者创建一个新的Observable-->
        <item>Empty/Never/Throw</item><!--创建行为受限的特殊Observable-->
        <item>From</item><!--将其它的对象或数据结构转换为Observable-->
        <item>Interval</item><!--创建一个定时发射整数序列的Observable-->
        <item>Just</item><!--将对象或者对象集合转换为一个会发射这些对象的Observable-->
        <item>Range</item><!--创建发射指定范围的整数序列的Observable-->
        <item>Repeat</item><!--创建重复发射特定的数据或数据序列的Observable-->
        <item>Start</item><!--创建发射一个函数的返回值的Observable-->
        <item>Timer</item><!--创建在一个指定的延迟之后发射单个数据的Observable-->
    </string-array>

    <!--变换操作
    这些操作符可用于对Observable发射的数据进行变换-->
    <string-array name="change_op">
        <item>Buffer</item><!--缓存，可以简单的理解为缓存，它定期从Observable收集数据到一个集合，然后把这些数据集合打包发射，而不是一次发射一个-->
        <item>FlatMap</item><!--扁平映射，将Observable发射的数据变换为Observables集合，然后将这些Observable发射的数据平坦化的放进一个单独的Observable，可以认为是一个将嵌套的数据结构展开的过程。-->
        <item>GroupBy</item><!--分组，将原来的Observable分拆为Observable集合，将原始Observable发射的数据按Key分组，每一个Observable发射一组不同的数据-->
        <item>Map</item><!--映射，通过对序列的每一项都应用一个函数变换Observable发射的数据，实质是对序列中的每一项执行一个函数，函数的参数就是这个数据项-->
        <item>Scan</item><!--扫描，对Observable发射的每一项数据应用一个函数，然后按顺序依次发射这些值-->
        <item>Window</item><!--窗口，定期将来自Observable的数据分拆成一些Observable窗口，然后发射这些窗口，而不是每次发射一项。类似于Buffer，但Buffer发射的是数据，Window发射的是Observable，每一个Observable发射原始Observable的数据的一个子集-->
    </string-array>

    <!--过滤操作
    这些操作符用于从Observable发射的数据中进行选择-->
    <string-array name="filter_op">
        <item>Debounce</item><!--只有在空闲了一段时间后才发射数据，通俗的说，就是如果一段时间没有操作，就执行一次操作-->
        <item>Distinct</item><!--去重，过滤掉重复数据项-->
        <item>ElementAt</item><!--取值，取特定位置的数据项-->
        <item>Filter</item><!--过滤，过滤掉没有通过谓词测试的数据项，只发射通过测试的-->
        <item>First</item><!--首项，只发射满足条件的第一条数据-->
        <item>IgnoreElements</item><!--忽略所有的数据，只保留终止通知(onError或onCompleted)-->
        <item>Last</item><!--末项，只发射最后一条数据-->
        <item>Sample</item><!--取样，定期发射最新的数据，等于是数据抽样，有的实现里叫ThrottleFirst-->
        <item>Skip</item><!--跳过前面的若干项数据-->
        <item>SkipLast</item><!--跳过后面的若干项数据-->
        <item>Take</item><!--只保留前面的若干项数据-->
        <item>TakeLast</item><!--只保留后面的若干项数据-->
    </string-array>

    <!--组合操作
    组合操作符用于将多个Observable组合成一个单一的Observable-->
    <string-array name="group_op">
        <item>And/Then/When</item><!--通过模式(And条件)和计划(Then次序)组合两个或多个Observable发射的数据集-->
        <item>CombineLatest</item><!--当两个Observables中的任何一个发射了一个数据时，通过一个指定的函数组合每个Observable发射的最新数据（一共两个数据），然后发射这个函数的结果-->
        <item>Join</item><!--无论何时，如果一个Observable发射了一个数据项，只要在另一个Observable发射的数据项定义的时间窗口内，就将两个Observable发射的数据合并发射-->
        <item>Merge</item><!--将两个Observable发射的数据组合并成一个-->
        <item>StartWith</item><!--在发射原来的Observable的数据序列之前，先发射一个指定的数据序列或数据项-->
        <item>Switch</item><!--将一个发射Observable序列的Observable转换为这样一个Observable：它逐个发射那些Observable最近发射的数据-->
        <item>Zip</item><!--打包，使用一个指定的函数将多个Observable发射的数据组合在一起，然后将这个函数的结果作为单项数据发射-->
    </string-array>

    <!--错误处理
    这些操作符用于从错误通知中恢复-->
    <string-array name="error_op">
        <item>Catch</item><!--捕获，继续序列操作，将错误替换为正常的数据，从onError通知中恢复-->
        <item>Retry</item><!--重试，如果Observable发射了一个错误通知，重新订阅它，期待它正常终止-->
    </string-array>

    <!--辅助操作
    一组用于处理Observable的操作符-->
    <string-array name="assist_op">
        <item>Delay</item><!--延迟一段时间发射结果数据-->
        <item>Do</item><!--注册一个动作占用一些Observable的生命周期事件，相当于Mock某个操作-->
        <item>Materialize/Dematerialize</item><!--将发射的数据和通知都当做数据发射，或者反过来-->
        <item>ObserveOn</item><!--指定观察者观察Observable的调度程序（工作线程）-->
        <item>Serialize</item><!--强制Observable按次序发射数据并且功能是有效的-->
        <item>Subscribe</item><!--收到Observable发射的数据和通知后执行的操作-->
        <item>SubscribeOn</item><!--指定Observable应该在哪个调度程序上执行-->
        <item>TimeInterval</item><!--将一个Observable转换为发射两个数据之间所耗费时间的Observable-->
        <item>Timeout</item><!--添加超时机制，如果过了指定的一段时间没有发射数据，就发射一个错误通知-->
        <item>Timestamp</item><!--给Observable发射的每个数据项添加一个时间戳-->
        <item>Using</item><!--创建一个只在Observable的生命周期内存在的一次性资源-->
    </string-array>


    <!--条件和布尔操作
    这些操作符可用于单个或多个数据项，也可用于Observable-->
    <string-array name="condition_op">
        <item>All</item><!--判断Observable发射的所有的数据项是否都满足某个条件-->
        <item>Amb</item><!--给定多个Observable，只让第一个发射数据的Observable发射全部数据-->
        <item>Contains</item><!--判断Observable是否会发射一个指定的数据项-->
        <item>DefaultIfEmpty</item><!--发射来自原始Observable的数据，如果原始Observable没有发射数据，就发射一个默认数据-->
        <item>SequenceEqual</item><!--判断两个Observable是否按相同的数据序列-->
        <item>SkipUntil</item><!--丢弃原始Observable发射的数据，直到第二个Observable发射了一个数据，然后发射原始Observable的剩余数据-->
        <item>SkipWhile</item><!--丢弃原始Observable发射的数据，直到一个特定的条件为假，然后发射原始Observable剩余的数据-->
        <item>TakeUntil</item><!--发射来自原始Observable的数据，直到第二个Observable发射了一个数据或一个通知-->
        <item>TakeWhile</item><!--发射原始Observable的数据，直到一个特定的条件为真，然后跳过剩余的数据-->
    </string-array>

    <!--算术和聚合操作
    这些操作符可用于整个数据序列-->
    <string-array name="math_op">
        <item>Average</item><!--计算Observable发射的数据序列的平均值，然后发射这个结果-->
        <item>Concat</item><!--不交错的连接多个Observable的数据-->
        <item>Count</item><!--计算Observable发射的数据个数，然后发射这个结果-->
        <item>Max</item><!--计算并发射数据序列的最大值-->
        <item>Min</item><!--计算并发射数据序列的最小值-->
        <item>Reduce</item><!--按顺序对数据序列的每一个应用某个函数，然后返回这个值-->
        <item>Sum</item><!--计算并发射数据序列的和-->
    </string-array>

    <!--连接操作
    一些有精确可控的订阅行为的特殊Observable-->
    <string-array name="connect_op">
        <item>Connect</item><!--指示一个可连接的Observable开始发射数据给订阅者-->
        <item>Publish</item><!--将一个普通的Observable转换为可连接的-->
        <item>RefCount</item><!--使一个可连接的Observable表现得像一个普通的Observable-->
        <item>Replay</item><!--确保所有的观察者收到同样的数据序列，即使他们在Observable开始发射数据之后才订阅-->
    </string-array>

    <!--转换操作-->
    <string-array name="transfer_op">
        <item>To</item><!--将Observable转换为其它的对象或数据结构-->
        <item>Blocking</item><!--阻塞Observable的操作符-->
    </string-array>
</resources>